# src/bobbi_the_watchdog/core/malware_detection.py
import pyclamd
import hashlib
import os

class MalwareDetection:
    def __init__(self, log_file="network_log.txt"):
        """Initialize with a log file path."""
        self.log_file = log_file
        try:
            self.clam = pyclamd.ClamdUnixSocket()
            if not self.clam.ping():
                raise Exception("ClamAV daemon not running")
        except Exception as e:
            self._log_result(f"Error initializing ClamAV: {e}")
            self.clam = None

    def _log_result(self, message):
        """Log results to the specified log file."""
        with open(self.log_file, "a") as f:
            f.write(f"{message}\n")
        print(message)

    def scan_with_clamav(self, file_path):
        """Scan a file for malware using ClamAV."""
        if not self.clam:
            self._log_result("ClamAV not available, skipping scan")
            return False

        if not os.path.exists(file_path):
            self._log_result(f"Error: File {file_path} not found")
            return False

        try:
            result = self.clam.scan_file(file_path)
            if result:
                self._log_result(f"Malware detected in {file_path}: {result}")
                return True
            else:
                self._log_result(f"No malware detected in {file_path} by ClamAV")
                return False
        except Exception as e:
            self._log_result(f"Error during ClamAV scan: {e}")
            return False

    def compute_hash(self, file_path):
        """Compute the SHA256 hash of a file."""
        if not os.path.exists(file_path):
            self._log_result(f"Error: File {file_path} not found for hash computation")
            return None

        try:
            with open(file_path, "rb") as f:
                file_data = f.read()
            file_hash = hashlib.sha256(file_data).hexdigest()
            self._log_result(f"SHA256 hash of {file_path}: {file_hash}")
            return file_hash
        except Exception as e:
            self._log_result(f"Error computing hash: {e}")
            return None

    def analyze_file(self, file_path):
        """Perform full malware analysis (ClamAV + hash)."""
        is_malware = self.scan_with_clamav(file_path)
        file_hash = self.compute_hash(file_path)
        return {
            "is_malware": is_malware,
            "hash": file_hash
        }

if __name__ == "__main__":
    # Example usage
    detector = MalwareDetection(log_file="../network_log.txt")
    result = detector.analyze_file("captured_files/captured_file")
    print(f"Analysis result: {result}")